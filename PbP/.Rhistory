}
return(val)
}
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
quarters <- getQuarterIndexes(PbP[,2])
PbP$qStatus <- sapply(quarters, function(x) x[2])
PbP$q <- sapply(quarters, function(x) as.integer(x[3]))
PbP$quarter <- fillSpaces(PbP$qStatus, PbP$q)
PbP$play_desc <- ifelse(PbP[,2]=="Â", paste("<home>", PbP[,4]), paste("<away>", PbP[,2]))
return(PbP)
}
ESPNShot <- "http://sports.espn.go.com/nba/gamepackage/data/shot?gameId="
ESPNPbP <- "http://sports.espn.go.com/nba/playbyplay?gameId=__GAMEID__&period=0"
gameId <- "400489244"
PbP <- getPbPData(ESPNPbP, gameId)
PbP_clean <- cleanPbP(PbP)
shotRaw <- getShotData(ESPNShot, gameId)
shotDF <- cleanShotData(shotRaw)
shotDF
PbP_clean
head(PbP_clean)
View(PbP_clean)
head(PbP_clean)
head(PbP)
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
quarters <- getQuarterIndexes(PbP[,2])
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$qStatus <- sapply(quarters, function(x) x[2])
PbP$q <- sapply(quarters, function(x) as.integer(x[3]))
PbP$quarter <- fillSpaces(PbP$qStatus, PbP$q)
PbP$play_desc <- ifelse(PbP[,2]=="Â", paste("<home>", PbP[,4]), paste("<away>", PbP[,2]))
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
head(PbP)
tail(PbP)
head(PbP_clean)
head(PbP)
tail(PbP)
tail(PbP)
head(PbP)
grep(":", PbP$TIME)
grepl(":", PbP$TIME)
PbP[grepl(":", PbP$TIME),]
PbP[!grepl(":", PbP$TIME),]
head(PbP)
tail(PbP)
PbP[is.na(PbP$CHARLOTTE),]
PbP[is.na(PbP$SCORE),]
PbP[is.na(PbP$TORONTO),]
tail(shotDF)
tail(PbP)
head(PbP)
PbP[grep("Quarter", PbP[,1]) + grep("Quarter", PbP[,2]),]
PbP[grepl("Quarter", PbP[,1]) + grepl("Quarter", PbP[,2]),]
?grepl
PbP[grepl("Quarter", PbP[,2]),]
PbP[grepl("Quarter", PbP[,1]),]
PbP[grepl("Quarter", PbP[,1]) | grepl("Quarter", PbP[,2]),]
head(PbP_clean)
tail(shotDF)
tail(PbP)
PbP[grepl("(start|end|summary)", PbP[,1], ignore.case=TRUE) | grepl("start|end|summary", PbP[,2], ignore.case=TRUE),]
PbP[grepl("(start|end|summary)", PbP[,1], ignore.case=TRUE) | grepl("start|end|summary", PbP[,2], ignore.case=TRUE),]
PbP[grepl("(start|end|summary)", PbP[,1], ignore.case=TRUE) | grepl("(start|end|summary)", PbP[,2], ignore.case=TRUE),]
PbP[grepl("[0-9](st|nd|rd|th) (quarter|overtime)", PbP[,1], ignore.case=TRUE) | grepl("[0-9](st|nd|rd|th) (quarter|overtime)", PbP[,2], ignore.case=TRUE),]
PbP[450:453,]
PbP[113:117,]
PbPOlder <- getPbPData(ESPNPbP, "260214015")
headPbPOlder
head(PbPOlder)
head(PbP)
PbP[is.na(PbP$SCORE)]
PbP[is.na(PbP$SCORE),]
head(paste(PbP[,1], PbP[,2]))
paste(PbP[,1], PbP[,2])[1:20]
PbP_clean[grep("vs.", PbP_clean$play_desc)]
PbP_clean[grep("vs.", PbP_clean$play_desc),]
PbP_clean[447:460,]
regmatches(PbP[,2],
regexec("(Start|End) of the ([0-9])(st|nd|rd|th) (Quarter|Overtime)",
PbP[,2]))
regmatches(PbP[,1],
regexec("(Start|End) of the ([0-9])(st|nd|rd|th) (Quarter|Overtime)",
PbP[,1]))
head(PbP)
subset(PbP, is.na(CHARLOTTE))
subset(PbP, is.na(CHARLOTTE))[,1]
regexpr(([0-9](st|nd|rd|th)), subset(PbP, is.na(CHARLOTTE))[,1])
regexpr("([0-9](st|nd|rd|th))", subset(PbP, is.na(CHARLOTTE))[,1])
regmatches(subset(PbP, is.na(CHARLOTTE))[,1], regexpr("([0-9](st|nd|rd|th))", subset(PbP, is.na(CHARLOTTE))[,1]))
regmatches(subset(PbP, is.na(CHARLOTTE))[,1], regexpr("([0-9])[(st|nd|rd|th)]", subset(PbP, is.na(CHARLOTTE))[,1]))
regmatches(subset(PbP, is.na(CHARLOTTE))[,1], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", subset(PbP, is.na(CHARLOTTE))[,1]))
regmatches(PbP[,1], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbP[,1]))
regmatches(PbPOlder[,1], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbPOlder[,1]))
PbP[grep("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbP[,1]),]
as.character(NA)
str(as.character(NA))
PbP[grep("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbP[,2]),]
regmatches(PbPOlder[,2], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbPOlder[,2]))
regmatches(PbPOlder[,1], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbPOlder[,1]))
?coalesce
regmatches(PbP[,1], regexpr("([0-9](st|nd|rd|th) (Quarter|Overtime))", PbP[,1]))
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$q <- getQuarterIndexes(PbP[,1])
#  PbP$quarter <- fillSpaces(PbP$qStatus, PbP$q)
PbP$play_desc <- ifelse(PbP[,2]=="Â", paste("<home>", PbP[,4]), paste("<away>", PbP[,2]))
return(PbP)
}
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
col[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
}
PbP_clean <- cleanPbP(PbP)
head(PbP)
col <- PbP[,1]
PbP$q <- getQuarterIndexes(PbP[,1])
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
}
PbP$q <- getQuarterIndexes(PbP[,1])
col <- PbP[,1]
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
head(QI)
QI[grep(finder, col)]
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
QI
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
}
getQuarterIndexes(PbP[,1])
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
return(QI)
}
getQuarterIndexes(PbP[,1])
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
return(QI)
}
head(PbP)
col <- PbP[,1]
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
regmatches(col, regexpr(finder, col))
QI[grep(finder, col)]
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
rbind(QI, PbP$q)
cbind(QI, PbP$q)
cbind(getQuarterIndexes(PbP[,1]), getQuarterIndexes(PbP[,2]))
cbind(getQuarterIndexes(PbPOlder[,1]), getQuarterIndexes(PbPOlder[,2]))
cbind(getQuarterIndexes(PbP[,1]), getQuarterIndexes(PbP[,2]))
fillSpaces <- function(val) {
if (!is.na(val[1])) {
new <- rep(as.integer(NA), length(val))
for (i in 1:length(val)) {
if (is.na(val[i])) val[i] <- val[i-1]
}
}
return(new)
}
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
return(QI)
}
fillSpaces <- function(val) {
if (!is.na(val[1])) {
new <- rep(as.integer(NA), length(val))
for (i in 1:length(val)) {
if (is.na(val[i])) val[i] <- val[i-1]
}
}
return(new)
}
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$quarter <- getQuarterIndexes(PbP[,1])
PbP$quarter <- fillSpaces(PbP$quarter)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$play_desc <- ifelse(PbP[,2]=="Â", paste("<home>", PbP[,4]), paste("<away>", PbP[,2]))
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
head(PbP_clean)
head(PbP)
PbP$quarter <- getQuarterIndexes(PbP[,1])
head(PbP)
val <- PbP$quarter
fillSpaces(val)
fillSpaces <- function(val) {
if (!is.na(val[1])) {
for (i in 1:length(val)) {
if (is.na(val[i])) val[i] <- val[i-1]
}
}
return(val)
}
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$quarter <- getQuarterIndexes(PbP[,1])
PbP$quarter <- fillSpaces(PbP$quarter)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$play_desc <- ifelse(PbP[,2]=="Â", paste("<home>", PbP[,4]), paste("<away>", PbP[,2]))
return(PbP)
}
PbP <- getPbPData(ESPNPbP, gameId)
PbPOlder <- getPbPData(ESPNPbP, "260214015")
PbP_clean <- cleanPbP(PbP)
PbPOlder_clean <- cleanPbP(PbPOlder)
head(PbP_clean)
tail(PbP_clean)
head(PbPOlder_clean)
tail(PbPOlder_clean)
PbP_clean
head(PbP_clean)
head(strsplit(PbP_clean[,1], " "))
head(strsplit(PbP_clean[,2], " "))
View(PbP_clean)
head(sub("([A-Z][^\\s])+", "NAME", PbP_clean[,2]))
head(sub("/\b([A-Z][a-z]+)\b/", "NAME", PbP_clean[,2]))
head(sub("\\b([A-Z][a-z]+)\\b", "NAME", PbP_clean[,2]))
head(sub("(\\b([A-Z][a-z]+)\\b)+", "NAME", PbP_clean[,2]))
head(sub("(\\b([A-Z][a-z]+)\\b){1,3}", "NAME", PbP_clean[,2]))
head(sub("(?:\\s*\\b([A-Z][a-z]+)\\b)+", "NAME", PbP_clean[,2]))
sub("(?:\\s*\\b([A-Z][a-z]+)\\b)+", "NAME", PbP_clean[,2])
tail(PbP)
gsub("(?:\\s*\\b([A-Z][^\\s]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][a-z]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][a-zA-Z]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][a-zA-Z]+)\\b)+", "NAME", "John Smith III went to the store with J.R. Smith and Josh Smith")
gsub("(?:\\s*\\b([A-Z][a-zA-Z]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][^\\s]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][a-zA-Z]+)\\b)+", "NAME", PbP_clean[,2])
gsub("(?:\\s*\\b([A-Z][a-zA-Z]+)\\b){2,}", "NAME", PbP_clean[,2])
?case
?select
?if
t
grep("hi", "not the word")
grep("hi", "not the word hi")
?grep
grepl("hi", "not the word")
grepl("hi", "not the word hi")
sentence <- Jonas Valanciunas makes two point shot (DeMar DeRozan assists)
sentence <- "Jonas Valanciunas makes two point shot (DeMar DeRozan assists)"
sentence
gsub("(?:\\s*\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(\\s*\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("([\\s]?\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(^\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(\\^\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("[A-Z][^\s]+", "__NAME__", sentence)
gsub("[A-Z][^\\s]+", "__NAME__", sentence)
gsub("[A-Z][^\\s][\\b]+", "__NAME__", sentence)
gsub("([A-Z][^\\s])+\\b", "__NAME__", sentence)
gsub("([A-Z][^\\s])+", "__NAME__", sentence)
gsub("([A-Z][^\\s]+\\b)+", "__NAME__", sentence)
gsub("(\\b[A-Z][^\\s]+\\b)+", "__NAME__", sentence)
gsub("(\\b*[A-Z][^\\s]+\\b)+", "__NAME__", sentence)
gsub("[A-Z][^\s]+", "__NAME__", sentence)
gsub("[A-Z][^\\s]+", "__NAME__", sentence)
gsub("[A-Z][^\\w]+", "__NAME__", sentence)
gsub("[A-Z][^\\s]+", "__NAME__", sentence)
gsub("[A-Z][a-z]+", "__NAME__", sentence)
gsub("[A-Z][A-Za-z]+", "__NAME__", sentence)
gsub("[A-Z][A-Za-z]+", "__NAME__", sentence)
gsub("[A-Z][A-Za-z]+", "__NAME__", "Nene went to the store with John Salmons")
gsub("([A-Z][A-Za-z]+)+", "__NAME__", "Nene went to the store with John Salmons")
gsub("(?:\\s*\\b([A-Z][a-z]+)\\b)+", "__NAME__", "Nene went to the store with John Salmons")
gsub("(?:\\s*\\b([A-Z][a-z]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\s]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\b]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\d]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\m]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\kes]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^\\[[:space:]]]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][^[[:space:]]]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__", sentence)
gsub("(?:\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__","Nene and J.R. Smith sitting around")
gsub("(?:\\s*\\b([A-Z][a-zA-z0-9]+)\\s)+", "__NAME__","Nene and J.R. Smith sitting around")
gsub("(?:\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__","Nene and J.R. Smith sitting around")
gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__","Nene and J.R. Smith sitting around")
gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",sentence)
gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",PbP_clean$play_desc)
cbind(PbP_clean$play_desc, gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",PbP_clean$play_desc))
cbind(PbP_clean$play_desc, gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",PbP_clean$play_desc))
?trim
gsub("\\s{1,}", " ","this is a  test s tring   three there    four one")
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",PbP_clean$play_desc))
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__",PbP_clean$play_desc)
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
head(play_anon)
unique(play_anon)
play_anon <- gsub("<.+>", "", PbP_clean$play_desc)
head(play_anon)
play_anon <- gsub("<.+> ", "", PbP_clean$play_desc)
play_anon <- gsub("<.+> ", "", PbP_clean$play_desc)
head(play_anon)
play_anon <- gsub("<.+> ", "", PbP_clean$play_desc)
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__", play_anon)
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
unique(play_anon)
?subset
grepl("\\s(makes|misses)\\s", play_anon)
play_anon[grepl("\\s(makes|misses)\\s", play_anon)]
unique(play_anon[grepl("\\s(makes|misses)\\s", play_anon)])
unique(play_anon[grepl("\\s(makes|misses)\\s", play_anon), invert=TRUE])
unique(play_anon[grepl("\\s(makes|misses)\\s", play_anon, invert=TRUE)])
?grepl
unique(play_anon[grep("\\s(makes|misses)\\s", play_anon, invert=TRUE)])
View(PbPOlder_clean)
play_anon[grepl("\\s(free throw)\\s", play_anon)]
PbPOlder_clean$play_desc[grepl("\\s(free throw)\\s", PbPOlder_clean)]
PbPOlder_clean$play_desc[grepl("\\s(free throw)\\s", PbPOlder_clean$play_desc)]
PbPOlder_clean$play_desc[grepl("\\s(tech)\\s", PbPOlder_clean$play_desc)]
PbPOlder_clean$play_desc[grepl("tech", PbPOlder_clean$play_desc)]
PbP_clean$play_desc[grepl("tech", PbP_clean$play_desc)]
play_anon
unique(play_anon[grep("\\s(makes|misses)\\s", play_anon, invert=TRUE)])
if(c(TRUE, FALSE)) return(5)
if(c(TRUE, FALSE)) 5
if(c(FALSE, TRUE)) 5
playType <- function(playDesc) {
play <- rep(as.character(NA), length(playDesc))
play[grepl("(makes|misses)", playDesc, ignore.case=TRUE)] <- "shot"
play[grepl("free throw"), playDesc, ignore.case=TRUE] <- "free throw"
play[grepl("timeout"), playDesc, ignore.case=TRUE] <- "timeout"
play[grepl("rebound"), playDesc, ignore.case=TRUE] <- "rebound"
}
PbP_clean$play <- playType(PbP_clean$play_desc)
playType <- function(playDesc) {
play <- rep(as.character(NA), length(playDesc))
play[grepl("(makes|misses)", playDesc, ignore.case=TRUE)] <- "shot"
play[grepl("free throw", playDesc, ignore.case=TRUE)] <- "free throw"
play[grepl("timeout", playDesc, ignore.case=TRUE)] <- "timeout"
play[grepl("rebound", playDesc, ignore.case=TRUE)] <- "rebound"
}
PbP_clean$play <- playType(PbP_clean$play_desc)
View(PbP_clean)
PbP_clean$play_desc[1]
playType(PbP_clean$play_desc[1])
playType <- function(playDesc) {
play <- rep(as.character(NA), length(playDesc))
play[grepl("(makes|misses)", playDesc, ignore.case=TRUE)] <- "shot"
play[grepl("free throw", playDesc, ignore.case=TRUE)] <- "free throw"
play[grepl("timeout", playDesc, ignore.case=TRUE)] <- "timeout"
play[grepl("rebound", playDesc, ignore.case=TRUE)] <- "rebound"
return(play)
}
playType(PbP_clean$play_desc[1])
playType(PbP_clean$play_desc[2:10])
PbP_clean$play <- playType(PbP_clean$play_desc)
View(PbP_clean)
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$period <- getQuarterIndexes(PbP[,1])
PbP$period <- fillSpaces(PbP$quarter)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$team <- ifelse(PbP[,2]=="Â", "home", "away")
PbP$play_desc <- ifelse(PbP[,2]=="Â", PbP[,3], PbP[,2])
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
head(PbP)
getQuarterIndexes <- function(col) {
finder <- "([0-9](st|nd|rd|th) (Quarter|Overtime))"
QI <- rep(as.character(NA), length(col))
QI[grep(finder, col)] <- regmatches(col, regexpr(finder, col))
return(QI)
}
fillSpaces <- function(val) {
if (!is.na(val[1])) {
for (i in 1:length(val)) {
if (is.na(val[i])) val[i] <- val[i-1]
}
}
return(val)
}
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$period <- getQuarterIndexes(PbP[,1])
PbP$period <- fillSpaces(PbP$quarter)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$team <- ifelse(PbP[,2]=="Â", "home", "away")
PbP$play_desc <- ifelse(PbP[,2]=="Â", PbP[,3], PbP[,2])
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
getQuarterIndexes(PbP[,1])
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$period <- getQuarterIndexes(PbP[,1])
PbP$period <- fillSpaces(PbP$period)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$team <- ifelse(PbP[,2]=="Â", "home", "away")
PbP$play_desc <- ifelse(PbP[,2]=="Â", PbP[,3], PbP[,2])
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
View(PbP_clean)
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$period <- getQuarterIndexes(PbP[,1])
PbP$period <- fillSpaces(PbP$period)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$team <- ifelse(PbP[,2]=="Â", "home", "away")
PbP$play_desc <- ifelse(PbP[,2]=="Â", PbP[,4], PbP[,2])
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
View(PbP_clean)
cleanPbP <- function(PbP) {
names(PbP) <- c("time", "away", "score", "home")
PbP$period <- getQuarterIndexes(PbP[,1])
PbP$period <- fillSpaces(PbP$period)
PbP <- PbP[grep(":", PbP$time),]
rownames(PbP) <- seq(nrow(PbP))
times <- do.call(rbind, strsplit(PbP$time, ":"))
PbP$seconds_left <- (as.integer(times[,1]) *60) + as.integer(times[,2])
PbP$team <- ifelse(PbP[,2]=="Â", "home", "away")
PbP$play_desc <- ifelse(PbP[,2]=="Â", PbP[,4], PbP[,2])
PbP$play <- playType(PbP$play_desc)
return(PbP)
}
PbP_clean <- cleanPbP(PbP)
View(PbP_clean)
PbP_clean[is.na(PbP_clean$play), "play_desc"]
play_anon <- gsub("<.+> ", "", PbP_clean$play)
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__", play_anon)
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
unique(play_anon)
play_anon <- gsub("<.+> ", "", PbP_clean$play_desc)
play_anon <- gsub("<.+> ", "", PbP_clean[is.na(PbP_clean$play),play_desc])
play_anon <- gsub("<.+> ", "", PbP_clean[is.na(PbP_clean$play),"play_desc"])
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
unique(play_anon)
summary(play_anon)
table(play_anon)
playType <- function(playDesc) {
playDesc <- gsub("\\s{1,}", " ", playDesc)
play <- rep(as.character(NA), length(playDesc))
play[grepl("(makes|misses)", playDesc, ignore.case=TRUE)] <- "shot"
play[grepl("free throw", playDesc, ignore.case=TRUE)] <- "free throw"
play[grepl("timeout", playDesc, ignore.case=TRUE)] <- "timeout"
play[grepl("rebound", playDesc, ignore.case=TRUE)] <- "rebound"
play[grepl("enters the game", playDesc, ignore.case=TRUE)] <- "substitution"
return(play)
}
PbP_clean <- cleanPbP(PbP)
play_anon <- gsub("<.+> ", "", PbP_clean[is.na(PbP_clean$play),"play_desc"])
play_anon <- gsub("\\s{1,}", " ", play_anon)
play_anon <- gsub("(\\s*\\b([A-Z][a-zA-z0-9]+)\\b)+", "__NAME__", play_anon)
play_anon <- gsub("[0-9]{1,2}-foot", "__DISTANCE__", play_anon)
unique(play_anon)
table(play_anon)
head(shotDF)
shotDF[100,]
q()
